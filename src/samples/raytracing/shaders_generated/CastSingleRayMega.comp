#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_debug_printf : enable

#include "common_generated.h"

layout(binding = 0, set = 0) buffer data0 { uint out_color[]; };
layout(binding = 1, set = 0) uniform accelerationStructureEXT m_pAccelStruct;
layout(binding = 2, set = 0) buffer dataUBO { RayTracer_UBO_Data ubo; };
layout(binding = 3, set = 0) buffer Vertices { Vertex vertices[]; };
layout(binding = 4, set = 0) buffer Indices { uint indices[]; };
layout(binding = 5, set = 0) buffer MatIds { uint mat_ids[]; };
layout(binding = 6, set = 0) buffer Materials { MaterialData_pbrMR materials[]; };
layout(binding = 7, set = 0) buffer InstanceMats { mat4 instance_mats[]; };
layout(binding = 8, set = 0) buffer MeshInfos { MeshInfo mesh_infos[]; };
layout(binding = 9, set = 0) buffer debugPoints {float coordsOfPoints[];};

uint ColorToInt(vec4 color) 
{
  uvec4 bytes = uvec4(color * 255.0f);
  uint result = (bytes.a << 24) | (bytes.b << 16) | (bytes.g << 8) | (bytes.r);
  return result;
}

vec4 ColorToVec4(uint color)
{
  float r = (color & 0xff) / 255.0f;
  float g = ((color & 0xff00) >> 8) / 255.0f;
  float b = ((color & 0xff0000) >> 16) / 255.0f;
  float a = ((color & 0xff000000) >> 24) / 255.0f;
  vec4 result = vec4(r, g, b, a);
  return result;
}

vec3 DecodeNormal(uint a_data)
{
  const uint a_enc_x = (a_data  & 0x0000FFFFu);
  const uint a_enc_y = ((a_data & 0xFFFF0000u) >> 16);
  const float sign   = (a_enc_x & 0x0001u) != 0 ? -1.0f : 1.0f;

  const int usX = int(a_enc_x & 0x0000FFFEu);
  const int usY = int(a_enc_y & 0x0000FFFFu);

  const int sX  = (usX <= 32767) ? usX : usX - 65536;
  const int sY  = (usY <= 32767) ? usY : usY - 65536;

  const float x = sX*(1.0f / 32767.0f);
  const float y = sY*(1.0f / 32767.0f);
  const float z = sign*sqrt(max(1.0f - x*x - y*y, 0.0f));

  return vec3(x, y, z);
}

// RayScene intersection with 'm_pAccelStruct'
//
CRT_Hit m_pAccelStruct_RayQuery_NearestHit(const vec4 rayPos, const vec4 rayDir)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsOpaqueEXT, 0xff, rayPos.xyz, rayPos.w, rayDir.xyz, rayDir.w);
  
  while(rayQueryProceedEXT(rayQuery)) { } // actually may omit 'while' when 'gl_RayFlagsOpaqueEXT' is used
 
  CRT_Hit res;
  res.primId = -1;
  res.instId = -1;
  res.geomId = -1;
  res.t      = rayDir.w;

  if(rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
  {    
	  res.primId    = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
	  res.geomId    = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true);
    res.instId    = rayQueryGetIntersectionInstanceIdEXT    (rayQuery, true);
	  res.t         = rayQueryGetIntersectionTEXT(rayQuery, true);
    vec2 bars     = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
    
    res.coords[0] = bars.y;
    res.coords[1] = bars.x;
    res.coords[2] = 1.0f - bars.y - bars.x;
  }

  return res;
}

bool m_pAccelStruct_RayQuery_AnyHit(const vec4 rayPos, const vec4 rayDir)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, rayPos.xyz, rayPos.w, rayDir.xyz, rayDir.w);
  rayQueryProceedEXT(rayQuery);
  return (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint iNumElementsX; 
  uint iNumElementsY; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;


vec3 GetNormal(CRT_Hit hit) {
  uint indexOffset = mesh_infos[hit.geomId].indexOffset;
  uint vertexOffset = mesh_infos[hit.geomId].vertexOffset;

  uint i0 = indices[indexOffset + 3 * hit.primId + 0];
  uint i1 = indices[indexOffset + 3 * hit.primId + 1];
  uint i2 = indices[indexOffset + 3 * hit.primId + 2];

  vec4 v0 = vertices[vertexOffset + i0].vertex;
  vec4 v1 = vertices[vertexOffset + i1].vertex;
  vec4 v2 = vertices[vertexOffset + i2].vertex;

  vec4 n0 = vec4(DecodeNormal(floatBitsToInt(v0.w)), 0);
  vec4 n1 = vec4(DecodeNormal(floatBitsToInt(v1.w)), 0);
  vec4 n2 = vec4(DecodeNormal(floatBitsToInt(v2.w)), 0);

  vec3 nLocal = hit.coords[0] * n0.xyz + hit.coords[1] * n1.xyz + hit.coords[2] * n2.xyz;
  vec3 n = normalize(mat3(transpose(inverse(instance_mats[hit.instId]))) * nLocal.xyz);
  return n;
}

vec4 GetPos(CRT_Hit hit)
{
  uint indexOffset = mesh_infos[hit.geomId].indexOffset;
  uint vertexOffset = mesh_infos[hit.geomId].vertexOffset;

  uint i0 = indices[indexOffset + 3 * hit.primId + 0];
  uint i1 = indices[indexOffset + 3 * hit.primId + 1];
  uint i2 = indices[indexOffset + 3 * hit.primId + 2];

  vec4 p0 = vertices[vertexOffset + i0].vertex;
  vec4 p1 = vertices[vertexOffset + i1].vertex;
  vec4 p2 = vertices[vertexOffset + i2].vertex;

  vec3 p = hit.coords[0] * p0.xyz + hit.coords[1] * p1.xyz + hit.coords[2] * p2.xyz;
  return instance_mats[hit.instId] * vec4(p, 1.0f);
}

vec4 Shade(vec4 hit, vec4 p, vec3 n, uint color, uint intensityL)
{
  float dist = length(p - hit);
  float intensity = intensityL / (dist * dist);
  vec4 lightDir = normalize(p - hit);
  float kk = dot(n, lightDir.xyz);
  vec4 color_out = ColorToVec4(color) * min(intensity * max(0.0f, kk), 1.0f);
  return color_out;
}

float D_beckmann ( in float roughness, in float NdH )
{
	const float pi = 3.1415926;
    float m    = roughness * roughness;
	float m2   = m * m;
	float NdH2 = NdH * NdH;

	return exp( (NdH2 - 1.0) / (m2 * NdH2) ) / (pi * m2 * NdH2 * NdH2);
}

vec3 fresnel ( in vec3 f0, in float product )
{
	product = clamp ( product, 0.0, 1.0 );		// saturate

	return mix ( f0, vec3 (1.0), pow(1.0 - product, 5.0) );
}

float G_default ( in float nl, in float nh, in float nv, in float vh )
{
	return min ( 1.0, min ( 2.0*nh*nv/vh, 2.0*nh*nl/vh ) );
}

vec4 CookTorrance (CRT_Hit hit, vec3 lightDir)
{
  const vec3 clr = vec3 ( 0.1, 0.2, 0.8 );
  const float gamma = 5.0;
  const float pi = 3.1415926;
  vec3 p = vec3(GetPos(hit));
  vec3 n = GetNormal(hit);
  vec3 l = normalize(lightDir);
  vec3 v = normalize(vec3(ubo.m_camPos) - p);
  vec3 h = normalize(l + v);
  float nh = dot(n, h);
  float nv = dot(n, v);
  float nl = dot(n, l);
  float vh = dot(v, h);
  vec3 base = pow ( clr, vec3 ( gamma ) );
  vec3 F0 = mix ( vec3(0.04), clr, m_reflection[hit.instId % palette_size] );
  float d = D_beckmann(0.2f, nh );
  vec3 f = fresnel ( F0, nv );
  float g = G_default ( nl, nh, nv, vh );

  vec3  ct   = f*(0.25 * d * g / nv);
  vec3  diff = max(nl, 0.0) * ( vec3 ( 1.0 ) - f ) / pi;
  float ks   = 0.5;

  return vec4 ( pow ( diff * base, vec3 ( 1.0 / gamma ) ), 1.0 );
}

void frisvad (const vec3 n , inout vec3 b1 , inout vec3 b2 )
{
  if(n.z < -0.9999999) // Handle the singularity
  {
    b1 = vec3(0.0 , -1.0, 0.0);
    b2 = vec3(-1.0, 0.0, 0.0);
    return ;
  }
  const float a = 1.0 / (1.0 + n.z);
  const float b = -n.x * n.y * a ;
  b1 = vec3(1.0 - n.x * n.x * a , b , -n.x);
  b2 = vec3(b, 1.0 - n.y* n.y * a , -n.y);
}


//------------------------------------------------------------------------------------------
// Hammersley Sampling
//------------------------------------------------------------------------------------------
#define PI 3.14159265358979

vec2 Hammersley(float i, float numSamples)
{   
    uint b = uint(i);
    
    b = (b << 16u) | (b >> 16u);
    b = ((b & 0x55555555u) << 1u) | ((b & 0xAAAAAAAAu) >> 1u);
    b = ((b & 0x33333333u) << 2u) | ((b & 0xCCCCCCCCu) >> 2u);
    b = ((b & 0x0F0F0F0Fu) << 4u) | ((b & 0xF0F0F0F0u) >> 4u);
    b = ((b & 0x00FF00FFu) << 8u) | ((b & 0xFF00FF00u) >> 8u);
    
    float radicalInverseVDC = float(b) * 2.3283064365386963e-10;
    
    return vec2((i / numSamples), radicalInverseVDC);
} 

vec3 SampleHemisphere_Uniform(float i, float numSamples)
{
    // Returns a 3D sample vector orientated around (0.0, 1.0, 0.0)
    // For practical use, must rotate with a rotation matrix (or whatever
    // your preferred approach is) for use with normals, etc.
    
	vec2 xi = Hammersley(i, numSamples);
    
    float phi      = xi.y * 2.0 * PI;
    float cosTheta = 1.0 - xi.x;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    
    //return vec3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);
     return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

}

vec3 SampleHemisphere_Cosinus(float i, float numSamples)
{
    vec2 xi = Hammersley(i, numSamples);
    
    float phi      = xi.y * 2.0 * PI;
    float cosTheta = sqrt(1.0 - xi.x);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
     
    // return vec3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);
  return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

}

float erf(float x)
{
  float sign_x = sign(x);
  
  float a1 =  0.254829592;
  float a2 = -0.284496736;
  float a3 =  1.421413741;
  float a4 = -1.453152027;
  float a5 =  1.061405429;
  float p  =  0.3275911;

  float t = 1.0/(1.0 + p*x);

  float y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);

  return sign_x * y;
}

float normal_cdf(float x)
{
  return 0.5 * (1 + erf(x / sqrt(2)));
}

float inverse_normal_cdf(float z)
{
  return sqrt(PI) / 2 * (z + PI/12*pow(z, 3) + 7*pow(PI,2)/480.0*pow(z,5));
}

vec3 random_sphere(float i)
{
  i = fract(i * PI * PI);
  

  vec3 random_vector;
  i = sin(cos(i * 35435534) + 5345);
  random_vector.x = inverse_normal_cdf(i);
  i = sin(cos(i * 3455) + 96756);
  random_vector.y = inverse_normal_cdf(i);
  i = sin(cos(i * 3653422) + 780005664);
  random_vector.z = inverse_normal_cdf(i);

  random_vector = normalize(random_vector);

  return random_vector;
}



vec3 SampleHemisphere_Boban(vec3 normal, float i)
{
    normal = normalize(normal);

    vec3 random_sphere_vector = random_sphere(i);

    // debugPrintfEXT("random_sphere_vector = %v3f, normal = %v3f", random_sphere_vector, normal);

    if (dot(random_sphere_vector, normal) < 0)
    {
      vec3 proj = dot(random_sphere_vector, normal) * normal;
     random_sphere_vector = random_sphere_vector - 2 * proj;
    }
    
    // if (dot(random_sphere_vector, normal) < 0)
    // {
    //   debugPrintfEXT("Negative! random_sphere_vector = %v3f", random_sphere_vector);
    // }

    return random_sphere_vector;

}

void FirstBounce(vec4 firstHitWorld, uint idx, uint numPoints, vec3 normal, inout float result)
{
  vec3 b1;
  vec3 b2;
  frisvad(normal, b1, b2);
  // debugPrintfEXT("norm_1 is %v3f", normal);
  // debugPrintfEXT("norm_2 is %v3f", b1);
  //debugPrintfEXT("norm_1 is %v3f norm_2 is %v3f norm_3 is %v3f", normal, b1, b2);
  // vec3 HammersleyVector = SampleHemisphere_Uniform(float(idx), float(numPoints));
  // vec3 HammersleyVector =  mat3(b1, b2, normal) * SampleHemisphere_Cosinus(float(idx), float(numPoints));
  //HammersleyVector = transpose(mat3(b2, b1, normal)) * HammersleyVector;
  vec3 HammersleyVector =  mat3(b1, b2, normal)* SampleHemisphere_Boban(normal, float(idx));//mat3(b1, b2, normal) * HammersleyVector;
  //  debugPrintfEXT("Boban vec is %v3f", HammersleyVector);
  //vec4 randDir = vec4(HammersleyVector, MAXFLOAT);
  //change rand dir
  vec4 randDir = vec4(HammersleyVector, MAXFLOAT);
  CRT_Hit secondHit = m_pAccelStruct_RayQuery_NearestHit(firstHitWorld, randDir);
  vec4 secondHitWorld = vec4(firstHitWorld.xyz + randDir.xyz*secondHit.t, 1);
  float len = length(secondHitWorld);
  vec3 n = GetNormal(secondHit);
  //n = n / length(n);
  //debugPrintfEXT("n_x %f, n_norm is %f, normal_secondHit is %v3f", n.x, length(n), n);
  // vec3 secondHitNorm = normalize(secondHitWorld.xyz);
  //float angle = dot(n, secondHitNorm);
  vec3 secondHitNorm = normalize(randDir.xyz);
  float angle = dot(n, secondHitNorm);
  // debugPrintfEXT("ranDir is %v3g, normal_secondHit is %v3g", randDir, n);

  // debugPrintfEXT("ranDir is %f", length(randDir.xyz));
  ///result +=  angle ;//* 256.0 / (length(randDir.xyz) );
  result += 256.0  / secondHit.t;
}

///////////////////////////////////////////////////////////////// subkernels here
void kernel_RayTrace_out_color(uint tidX, uint tidY, in vec4 rayPosAndNear, in vec4 rayDirAndFar, uint out_colorOffset) 
{
  vec4 rayPos = rayPosAndNear;
  vec4 rayDir = rayDirAndFar;
  vec4 color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
  CRT_Hit hit = m_pAccelStruct_RayQuery_NearestHit(rayPos, rayDir);
  CRT_Hit hitLight;

  for (int j = 0; j < 1; ++j)
  {
    //CRT_Hit hit = m_pAccelStruct_RayQuery_NearestHit(rayPos, rayDir);
    if (hit.primId == -1) {
      break;
    }
    
    vec3 hit_point = vec3(rayPos) + vec3(rayDir)*hit.t;
    //change hit_point
    //vec3 hit_point = vec3(hit.coords[0],hit.coords[1],hit.coords[2]);

    vec3 n = GetNormal(hit);
    ////debugPrintfEXT("norm_1 is %v3f", n);
    // vec3 lightPos = m_lights[j].pos.xyz;
    // vec3 lightDir = normalize(lightPos - hit_point);

    //CHANGE lightpos
    vec3 lightPos = vec3(0.0f, 0.0f, 0.0f);
    vec3 lightDir = normalize(lightPos - hit_point);


    //vec3 offset = vec3(0.4,0.5,0);
    //vec3 offset_2 = vec3(0.8,0.1,0.2);
    //vec4 shade = vec4(1, 1, 1, 1);
    // color = Shade({hit_point, 1.0}, {lightPos, 1.0}, n, color, 100);
    
    
    hitLight = m_pAccelStruct_RayQuery_NearestHit(vec4(hit_point, 1.0f), vec4(lightDir, MAXFLOAT));
   
    if (hitLight.primId != -1)
    {
      float shade = max(dot(n, normalize(lightDir)), 0.1f);
      color += shade;
      //CHANGE add color

    }
    //out_color[tidY * ubo.m_width + tidX + out_colorOffset] = ColorToInt(color);
    int numPoints = 50;
    float result = 0.f;
    // if ((ubo.m_width / 2 < tidX) && (ubo.m_height / 2 < tidY))
    // {
      //out_color[tidY * ubo.m_width + tidX + out_colorOffset] = ColorToInt(vec4(1.0, 0.0, 0.0, 1.0));
      //vec4 firstHitWorld = GetPos(hitLight);
      
      
      //vec4 firstHitWorld = vec4(hit_point.xyz + lightDir*hitLight.t,1);
      //CHANGE FIRSTHIT
      vec4 firstHitWorld = vec4(hit_point.xyz,1);
      
      for (int i = 0; i < numPoints; ++i) 
      {
        float random_number = mod(sin(gl_GlobalInvocationID[1]) * 1023 + i * 342 , 503)+cos(gl_GlobalInvocationID[1]);
        FirstBounce(firstHitWorld, uint(random_number), numPoints, n, result);
      }
      result /= numPoints;
      //debugPrintfEXT("result is %f", result);
      //uvec4 bytes = uvec4(color * 255.0f);
      //uint result = (bytes.a << 24) | (bytes.b << 16) | (bytes.g << 8) | (bytes.r);
      float r_scale = 255.0;
      float r_r = result;
      float r_g = mod(r_scale  * result,1.0);
      r_r -= r_g / r_scale;
      float r_b = mod(result * r_scale * r_scale, 1.0);
      r_g -= r_b / r_scale;
      uint r_result =  uint(r_b) << 16 | uint(r_g) << 8 | uint(r_r);
      out_color[tidY * ubo.m_width + tidX + out_colorOffset] = r_result;
      // out_color[tidY * ubo.m_width + tidX + out_colorOffset] = uint(result);
    //}
    // if ((ubo.m_width / 2 == tidX) && (ubo.m_height / 2 == tidY))
    // {
    //   out_color[tidY * ubo.m_width + tidX + out_colorOffset] = ColorToInt(vec4(1.0, 0.0, 0.0, 1.0));
    //   //vec4 firstHitWorld = GetPos(hitLight);
    //   vec4 firstHitWorld = vec4(hit_point.xyz + lightDir*hitLight.t,1);
    //   coordsOfPoints[0] = firstHitWorld.x;
    //   coordsOfPoints[1] = firstHitWorld.y;
    //   coordsOfPoints[2] = firstHitWorld.z;
    //   //debugPrintfEXT("index_0 is %f", coordsOfPoints[0]);
    //   //debugPrintfEXT("index_1 is %f", coordsOfPoints[1]);
    //   //debugPrintfEXT("index_2 is %f", coordsOfPoints[2]);
    //   for (int i = 0; i < numPoints; ++i) 
    //   {
    //     vec4 randDir = vec4(SampleHemisphere_Uniform(float(i), float(numPoints)), MAXFLOAT);
    //     //debugPrintfEXT("randDir %1.2v4f", randDir);
    //     CRT_Hit secondHit = m_pAccelStruct_RayQuery_NearestHit(firstHitWorld, randDir);
    //     //vec4 secondHitWorld = GetPos(secondHit);
    //     vec4 secondHitWorld = vec4(firstHitWorld.xyz + randDir.xyz*secondHit.t, 1);
    //     //debugPrintfEXT("secondHitWorld %1.2v4f", secondHitWorld);
    //     coordsOfPoints[i * 3 + 3] = secondHitWorld.x;
    //     //debugPrintfEXT("index is %f", coordsOfPoints[i * 3 + 3]);

    //     coordsOfPoints[i * 3 + 4] = secondHitWorld.y;
    //     //debugPrintfEXT("index is %f", coordsOfPoints[i * 3 + 4]);

    //     coordsOfPoints[i * 3 + 5] = secondHitWorld.z;
    //     //debugPrintfEXT("index is %f", coordsOfPoints[i * 3 + 5]);
    //   }
    // }
  }
}

void kernel_InitEyeRay(uint tidX, uint tidY, inout vec4 rayPosAndNear, inout vec4 rayDirAndFar) 
{
  
  rayPosAndNear = ubo.m_camPos; // to_float4(m_camPos, 1.0f);
  
  const vec3 rayDir = EyeRayDir(float(tidX), float(tidY), float(ubo.m_width), float(ubo.m_height), ubo.m_invProjView);
  rayDirAndFar  = vec4(rayDir, MAXFLOAT);

}

///////////////////////////////////////////////////////////////// subkernels here

void main()
{
  ///////////////////////////////////////////////////////////////// prolog
  const uint tidX = uint(gl_GlobalInvocationID[0]); 
  const uint tidY = uint(gl_GlobalInvocationID[1]); 
  const vec4 m_camPos = ubo.m_camPos;
  const uint m_height = ubo.m_height;
  const uint m_width = ubo.m_width;
  ///////////////////////////////////////////////////////////////// prolog
  
  vec4 rayPosAndNear,  rayDirAndFar;
  kernel_InitEyeRay(tidX, tidY, rayPosAndNear, rayDirAndFar);

  kernel_RayTrace_out_color(tidX, tidY, rayPosAndNear, rayDirAndFar, 0);

}

